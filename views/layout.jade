doctype html
html
  head
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, initial-scale=1")
    title HTML5 Deck of Cards
    link(href="/bundle.min.css" rel="stylesheet")
    link(href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,600|Ubuntu+Condensed' rel='stylesheet' type='text/css')
  body
    #players
    #chat-container
      ul(id="messages")
      input(id="chat-input" class="input" placeholder="Gửi lời yêu thương")
    div(id="modal" class="modal" aria-hidden="true")
      div(tabindex="-1", data-micromodal-close)
        div(role="dialog" aria-modal="true" aria-labelledby="modal-title")
          header
            h1(id="modal-title")
            button(aria-label="Close modal", data-micromodal-close) X
          #modal-content
    <a href="https://github.com/pakastin/deck-of-cards"><img class="gh-ribbon" style="position: fixed; top: 0; right: 0; border: 0;" src="https://camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png"></a>
    script(src="https://cdn.socket.io/4.7.4/socket.io.min.js" integrity="sha384-Gr6Lu2Ajx28mzwyVR8CFkULdCU7kMlZ9UthllibdOSo6qAiN+yXNHqtgdTvFXMT4" crossorigin="anonymous")
    script(src="https://unpkg.com/micromodal/dist/micromodal.min.js")
    script.
      MicroModal.init();
      var socket = io("/");
      socket.on("connect", () => {
        const id = window.sessionStorage.getItem("__uid");
        if (!id) {
          window.sessionStorage.setItem("__uid", socket.id);
        }
      })
      window.socket = socket;
      socket.on("player-join", (players) => {
        window.players = players;
        renderPlayer(players)
      });
      function getFontSize() {
        return window.getComputedStyle(document.body).getPropertyValue('font-size').slice(0, -2)
      }
      var fontSize = getFontSize();
      function renderPlayer() {
        const $container = document.getElementById("players");
        $container.innerHTML = "";
        const deg = Math.floor(360 / players.length);
        players.forEach(({ id, name }, i) => {
          if (id === sessionStorage.getItem("__uid")) {
            return
          }
          const x =
            (2 * Math.cos((deg * i * Math.PI) / 180)) * 120 * fontSize / 16;
          const y =
            (2 * Math.sin((deg * i * Math.PI) / 180)) * 100 * fontSize / 16 - 80;
          const $el = document.createElement("div");
          $el.textContent = name;
          $el.style.cssText = `position: absolute; top:0; left: 0; transform: translate(${x}px, ${y}px);`;
          $container.appendChild($el);
        });
      }
      onbeforeunload = (event) => {
        socket.emit("leave-room", sessionStorage.getItem("__uid"))
      };

      const $chatInput = document.getElementById("chat-input")
      $chatInput.onkeydown = function(e) {
        if (e.key !== "Enter") {
          return
        }
        socket.emit("send-message", {
          id: sessionStorage.getItem("__uid"),
          message: this.value
        })
        this.value = ""
      }
      const $messages = document.getElementById("messages")

      socket.on("receive-message", ({ message, player }) => {
        const $el = document.createElement("li")
        const playerId = sessionStorage.getItem("__uid")
        const isOwn = playerId === player.id
        const $playerName = document.createElement("b")
        if (isOwn) {
          $el.classList.add("own")
        }
        $playerName.innerText = isOwn ? "" : `${player.name}: `
        const $message = document.createElement("span")
        $message.innerText = message
        $el.appendChild($playerName)
        $el.appendChild($message)
        $messages.appendChild($el)
        $messages.scrollTo(0, $messages.scrollHeight)
      })


  script(src="/deck.min.js" type="text/javascript")
  block main
